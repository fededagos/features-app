---
title: "C4 Cerebellar Cell Types Classifier"
format:
  html:
    toc: true
    toc-title: Contents
    toc-location: left
    code-fold: false
    embed-resources: true
    code-line-numbers: true
lightbox: true
jupyter: python3
---

One of the key outcomes of the C4 initiative has been the development of a robust cerebellar cell types classifier. This classifier is designed to predict cerebellar neuron types based on spike-sorted data and is released as part of [`npyx`](){target="_blank"}.

Our aim in releasing this tool is to provide the cerebellum research community with a resource that can be used "out of the box", to classify cerebellar cell types, supporting reproducibility and further innovation in the field.

The classifier can be run on your own spike-sorted data directly from the command line and is simple to set up, even for users with minimal programming experience. Below, we provide a step-by-step tutorial to get started.

## Running the model from the command line 
Here we describe how to run the model on your own spike-sorted data from the command line.  

### Prerequisites

Before you begin, we recommend that you set up a way to manage Python packages or virtual environments. This can be any method of your choice, including Docker containers or other tools. However, for simplicity and ease of use, we recommend using conda environments, which allow you to manage dependencies effectively in an isolated environment.

To use conda, you will need to have Anaconda or Miniconda installed on your system:

- Download Anaconda here{target=”_blank”}.
- Alternatively, for a lightweight option, download Miniconda here{target=”_blank”}.

Additionally, while the classifier can run on CPUs, having a CUDA-enabled GPU is recommended for faster processing. This is especially useful if you plan to reproduce the training or results from the paper. GPU support is optional but highly encouraged for efficiency.

Once you have conda installed in your system, let's start setting up the environment where the classifier will run


```{bash}
conda create -n c4_classifier python=3.10
conda activate c4_classifier
```

### Installing NeuroPyxels (npyx)

The classifier relies on the `npyx` package for processing and analysis. Install it in your environment of choice like this using pip:

```{bash}
pip install npyx[c4]
```

This will install both the base version of `npyx` and the one including all classifier functionality, including the command line interface `c4`.

### Run the classifier CLI

Once the environment is set up and npyx installed, you can run the classifier on your spike-sorted data. 

To run the classifier on the phy-compatible dataset in the current working directory, simply run
```{bash}
c4 -dp .
```

To run it on a phy-compatible dataset present elsewhere, run 
```{bash}
c4 -dp path/to/my/dataset
```

By default, the classifier will:

- Predict cell types for all “good” units, as defined by manual curation in phy.
- Ignore layer information unless explicitly instructed to use it.

To customize this behavior, the following options can be used:

#### Command-Line arguments

**`-dp / --data-path`**

- **Type**: str
- **Default**: "."
- **Description**: Specifies the path to the folder containing the dataset to classify. This is the same folder used e.g. in calling `phy`.
- **Example**: `c4 -dp /data/my_cerebellum_project`
<br/><br/>

**`-q / --quality`**

- **Type**: str
- **Choices**: "all", "good"
- **Default**: "good"
- **Description**: Determines the quality of units to classify.
    - "good": Classify only manually curated "good" units.
    - "all": Classify all units.
- **Example**: `c4 -dp . -q all`

::: {.column-margin .callout-caution} 
When selecting `all` the classifier will be applied also to possible MUAs and noise units. Ideally, confidence should be low on these units, however, that could not always be the case. It is the ultimate user's responsibility to meaningfully interpret classifier's results.
:::
<br/><br/>

**`--units`**

- **Type**: str (space-separated list)
- **Default**: None
- **Description**: Specifies the list of units to classify. If not provided, defaults to all units of specified `quality`.
- **Example**: `c4 -dp . --units 1 3 5`
<br/><br/>

**`--mli_clustering`**

  - **Type**: flag
  - **Default**: False
  - **Description**: Divides molecular layer interneurons (MLI) into two clusters for classification. TODO more explaining.
  - **Example**: `c4 -dp . --mli_clustering`
<br/><br/>

**`--layer`**

- **Type**: flag
- **Default**: False
- **Description**: Enables the use of layer information to improve classification accuracy.
    - Layer information must be stored in `cluster_layer.tsv` file in the dataset folder
    - `cluster_layer.tsv` should have two columns: cluster_id and layer
    - Can be manually created or generated by `phyllum` (more information to follow).
- **Example**: `c4 -dp . --layer`

::: {.column-margin .callout-warning} 
If present, layer information has a strong influence on the classifier's predictions. Always double check that you trust the layer information
before using this version of the classifier.
:::
<br/><br/>

**`--threshold`**

- **Type**: float
- **Default**: 2.0
- **Description**: Sets confidence ratio threshold, which is the ratio of the classifier's confidence in its most confident prediction to the second most confident. Predictions with a ratio below this value are discarded.
- **Example**: `c4 -dp . --threshold 1.5`

::: {.column-margin .callout-caution} 
Setting the confidence ratio threshold value too low will expose predictions the classifier is not confident on. These could reflect units that for some reason or another are far from the classifier's training distribution (MUAs, nuclei neurons, noise,...).
:::
<br/><br/>

**`--parallel / --serial`**

- **Type**: flag
- **Default**: True (parallel processing enabled)
- **Description**: Determines whether to use parallel processing for faster classification.
- **Examples**:
    - Enable parallel: `c4 -dp . --parallel`
    - Disable parallel: `c4 -dp . --serial`
<br/><br/>

**`--again`**

- **Type**: flag
- **Default**: False
- **Description**: Forces re-download of models and clears `npyx` processing caches. Useful in debugging.
- **Example**: `c4 -dp . --again`
<br/><br/>

**`--fp_threshold`**

- **Type**: float
- **Default**: 0.05
- **Description**: Sets pre-processing false positive rate threshold. TODO more explaining. Units above this are excluded.
- **Example**: `c4 -dp . --fp_threshold 0.1`
<br/><br/>

**`--fn_threshold`**

- **Type**: float
- **Default**: 0.05
- **Description**: Sets pre-processing false negative rate threshold. TODO more explaining. Units above this are excluded.
- **Example**: `c4 -dp . --fn_threshold 0.1`
<br/><br/>

**`--waveform_peak_sign`**

- **Type**: str
- **Choices**: "negative", "positive", "None"
- **Default**: "negative"
- **Description**: Specifies how to preprocess the waveform to enforce the sign of their highest-amplitude peak. The classifier was trained enforcing negative peaks. 
- **Example**: `c4 -dp . --waveform_peak_sign positive`

::: {.column-margin .callout-important} 
This option should not be changed in 99% of cases to respect the classifier's training data. It can be useful for advanced use-cases, like testing the sensitivity of the classifier to waveform shapes.
:::



#### Example usecases

1. Classify all “good” units in the current dataset:
```{bash}
c4 -dp .
```

2. Classify all units (regardless of quality) in a dataset located at `/data`:
```{bash}
c4 -dp /data -q all
```

3. Classify specific units (e.g., 1, 2, and 3) with layer information and parallel processing:
```{bash}
c4 -dp . --units 1 2 3 --layer --parallel
```

4. Classify using a lower confidence threshold and enable MLI clustering:
```{bash}
c4 -dp /data --threshold 1.5 --mli_clustering
```

5. Force re-download of models, clear caches and classify with relaxed pre-processing false positive/negative thresholds:
```{bash}
c4 -dp /data --again --fp_threshold 0.1 --fn_threshold 0.1
```

## Running the classifier directly from phy

A direct [`phy`](https://github.com/cortex-lab/phy){target="_blank"} integration for the C4 classifier is in the works. Stay tuned for more details...


